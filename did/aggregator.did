// An account is referenced by (owner, subid).
// `owner` is a principal, `subid` a nat.
type SubId = nat;

// A virtual account is referenced by (owner, virid).
// `owner` is a principal, `virid` a nat.
type VirId = nat;

// TxInput describes a transaction. 
// Currently there is only one transaction type, `ftTransfer`.
// In the future new transaction types will be introduced.
type TxInput = variant { ftTransfer : FtTransfer };

// FtTransfer describes a fungible token transfer from one account to another.
// `from` is the sending account.
// `to` is the receiving account. 
// `assetId` is the id of the token to be transferred.
// `amount` is the number of tokens to be transferred.
// Specifying `max` as `amount` transfers the entire available amount in the 
// sending account.
// `memo` is a vector of blobs which can be used to attach metadata that is 
// relevant for the sender or receiver.
//
// Backward compatibility:
// New fields can be added to the record in the future as long as they are
// optional. Old code will not specify the new field and it will be set to
// null by Candid.
// For example, we can later introduce an optional `nonce` field that can 
// be used for idempotency if desired. 
// As another example, we can later introduce optional `fee` field that
// be used to select one from several fee modes if desired.
type FtTransfer = record {
  from : AccountReference;
  to : AccountReference;
  assetId : nat;
  amount : variant {
    amount : nat;
    max;
  };
  memo : vec blob;
};

// The sending or receiving account can be an account, virtual account, or
// the "mint".
// `sub` specifies the account of the caller with the given SubId.
// `vir` specifies the virtual account of the given owner principal with the
// given VirId. The caller must have access to that virtual account or the 
// transfer will fail.
// `mint` specifies the "mint" of the given asset id. Sending to `mint` burns
// tokens. Sending from `mint` mints tokens. In both cases, the caller must be
// the controller of the given asset id or the transfer will fail. Only the
// controller can mint and burn tokens.
type AccountReference = variant {
  sub : SubId;
  vir : record { principal; VirId };
  mint;
};

// Transactions are assigned a globally unique id when they are submitted to the
// aggregator. The global id is valid forever and will never be re-used for a 
// different transaction, even if the transaction fails in processing.
type GlobalId = record { nat; nat };

// The status of a transaction at the aggregator can be either queued or 
// pending. 
// `queued` means that the transaction is in the queue in the aggregator
// and has not yet been placed into a batch. In this case the status specifies
// the distance from the head of the queue measured in the number of 
// transactions that come before it.
// `pending` means that the transaction has been placed in a batch and the
// batch has been sent to the ledger, but the aggregator has not yet received
// the response, i.e. does not know for sure whether the batch was received.
// `unknown` means one of the following:
// * the transaction has been received by the ledger
// * the transactions has been dropped permanently
// * the transaction was never known by this aggregator
type TxStatus = variant {
  queued : nat;
  pending;
  unkown;
};

// API

service : (principal, nat) -> {
  // UPDATES

  // `submitAndExecute` submits a transaction to the aggregator.  The aggregator
  // returns the issued global id and the TxStatus immediately after enqueueing
  // the transaction. The purpose of returning TxStatus is so that the caller
  // knows the queue position without having to make another call.
  // 
  // The returned TxStatus is always `queued` and never `pending`, i.e.
  // returning a TxStatus variant instead of only the queue position has some
  // redundancy. The reason to do so is to simplify the calling code though
  // unification. The assumption is that the calling code will poll the 
  // `txStatus` query function after submission. Hence the first `TxStatus` 
  // returned by `submitAndExecute` can be fed into the same processing logic as
  // the return values obtained in the subsequent polling.
  // 
  // `submitAndExecute` will trap in the following cases: * A `SubId`, `VirId`
  // or `assetId` is larger than 64 bits * `amount` is larger than 128 bits *
  // The principal in `vir` is longer than 29 bytes or otherwise invalid * The
  // memo vector is too long (too many entries) * An individual memo entry is
  // too long (too many bytes) * The combined length of all memos is too large
  // (too many bytes) * The internal queue is full (back pressure) The trap
  // message will contain the reason in descriptive text format.
  // 
  // `submitAndExecute` is subject to ingress message inspection.  Any call that
  // would trap for any of the above reasons will be rejected during inspection.
  // This will lead to an http 500 error. The caller will not be able to learn
  // the specific reason why the call failed.
  // 
  // The aggregator does not check if the accounts exist, if the caller has
  // access to the accounts or if there are sufficient funds. Those kind of
  // errors will only be caught later during processing in the ledger. 
  // 
  // Backwards compatibility: In the future, new transaction types can be
  // introduced as new variant cases in the `TxInput` argument.  New fields can
  // be added to the returned record. Old code will not see those fields.  If
  // structure of GlobalId changes then it is advisable to introduce a new
  // function replacing this `submitAndExecute`.  New cases can be added to the
  // TxStatus variant because it is wrapped in an `opt` (see also the `txStatus`
  // query below).
  submitAndExecute : (TxInput) -> (record { GlobalId; opt TxStatus });
  
  // QUERIES

  // `txStatus` returns the current status of a transaction specified by its
  // global id.
  //  
  // In general, the process to find out about the status of a given global id
  // is as follows:
  //
  // 1. Query the ledger for the given `gid`. That will return one of
  // "processed/successful", "processed/failed" or "unkown". If it is "unknown"
  // to the ledger then go to step 2.
  // 
  // 2. Query the aggregator. That will return one of "queued", "pending" or "unknown".
  //    If it is "pending" then go back to step 1., i.e. query the ledger again
  //    after X milliseconds.
  //    If it is "queued" then repeat step 2. after X milliseconds. This means
  //    we poll the aggregator and watch the queue distance go down until the
  //    response is different from "queued".
  //    If it is "unknown" then go to step 3.
  //
  // 3. Query the ledger for the final answer. If the response from the ledger
  // is "unknown" then we know the transaction has been permanently dropped and
  // we can safely resubmit it (if still desired). 
  //  
  // Note that the status in the aggregator can go from "pending" back to
  // "queued". This can happen if an inter-canister message carrying a batch
  // fails.  The aggregator will automatically resend the batch, so after a
  // while the status will go to "pending" a second time.
  // 
  // Transactions can be permanently dropped due to the following reasons:
  // * The aggregator was frozen (due to low cycle balance) and remained frozen
  // for a certain time (~2 minutes) while the transaction was queued.
  // * The aggregator ran out of cycles entirely (hence got uninstalled) while
  // the transaction was queued.
  // * The communication from the aggregator's subnet to the ledger's subnet was
  // interrupted for longer than a certain time (~2 minutes).
  // * The aggregator was upgraded while the transaction was queued and the
  // upgrade took longer than a certain time (~2 minutes).
  // * The aggregator was upgraded while the transaction was queued and
  // discarded its state.
  // 
  // The function will trap if the nats in global id are larger than 64 bits.
  // 
  // Backwards compatibility: 
  //
  // New fields can be added to the returned record.  Old code will not see
  // those fields. 
  // 
  // If the internal structure of GlobalId changes then it is advisable to
  // introduce a new function replacing this `txStatus`.
  // 
  // New cases can be added to the TxStatus variant because it is wrapped in an
  // `opt`. Old code that does not know the new case will see the whole status
  // as `null`.  
  // 
  // For example, if we want to add the ability to cancel transactions that are
  // already in the queue then we can add a case `canceled` to the TxStatus
  // variant. An old frontend that is not aware of the case `canceled` would see
  // `null` as the status if it queries a transaction that is in that state.
  // However, this is not a problem because a frontend queries only its own
  // transactions. And if the frontend does not know about the cancelation
  // feature then none of its transactions will be in that state.
  txStatus : (GlobalId) -> (record { opt TxStatus }) query; };
  
// The protocol is designed such that the aggregator can discard its state
// during upgrades. Transactions in the queue will be dropped. The protocol is
// designed such that users can determine a dropped transaction with certainty.
// They can then resubmit the transaction to the upgraded aggregator or to a
// different aggregator.