// This file is a "sub api". It describes the part of the API of the ledger that
// is intended for use by ingress messages.
//
// It describes the API exactly as implemented, i.e. the types of values and
// return values are structurally equivalent to the ones derived from the Motoko
// source code.

type AssetId = nat;
type SubId = nat;
type VirId = nat;
type RemoteId = record { principal; nat };
type GlobalId = record { nat; nat };

// The only account "type" at the moment is ft (fungible token). A fungible token
// is defined by its asset id. The AccountType of a given account is immutable.
//
// Backward compatibility: see [1]
type AccountType = variant { ft : AssetId };

// The mutable state of a fungible token account is defined by its balance.
//
// Backward compatibility: see [1]
type AccountState = variant { ft : nat };

// The supply of a fungible token is a nat. Values must fit in 64 bits.
type FtSupply = nat;

// Timestamp measured in nanoseconds since the beginning of the Unix epoch. We
// only need timestamps in the future, hence negative values are not allowed.
//
// In the context of account expiration the sentinel value of 0 means that
// the account does not expire.
type Time = nat64;

// A gid (global id) is a globally unique transaction id. GidStatus describes
// the progress made on the processing of a submitted transaction. See README.md
// for further explanation of the status states.
//
// State `processed` includes the processing result. A null value means that the
// processing result has already been archived. The caller must then call the
// archive.
//
// Backwards compatibility:
// In the future, additional data can be returned inside each of the variant
// cases of GidStatus. No new cases should be introduced because that would
// break existing clients. Hence clients do not need to wrap the variant inside
// an opt.
type GidStatus = variant {
  awaited : record {};
  processed : record { opt TxResult };
  dropped : record {};
};

// This type describes the result of processing a transaction.
//
// Backwards compatibility: New variant cases beyond success and failure will
// not be added because that would break existing clients.
type TxResult = variant {
  failure : ProcessingError;
  success : TxOutput;
};

// The type TxOutput describes the effect of a successfully processed
// transaction. For example, if a transaction was specified as transferring a
// "max" amount then this type describes the actual amount that was transferred.
// "amount" is the amount credited to the receiver and "amount + fee" is the
// amount debited to the sender.
//
// The variant cases inside TxOutput match the cases in the corresponding
// TxInput type used by the aggregator. Usually, the effect of a transaction can
// be completely understood if TxInput and TxOutput of that transaction are
// known.
//
// The type ProcessingError describes the reason why an unsuccessfully processed
// transaction failed.
//
// Backwards compatibility: Expect new variant cases to be added to both types.
// However, generally, client code will query for the transaction result only
// for those transactions that it has itself submitted. If that is true then the
// client code will never receive an unknown variant case here, hence the client
// code can but does not need to wrap these inside an opt.
type TxOutput = variant {
  ftTransfer : record { amount : nat; fee : nat };
};
type ProcessingError = variant {
  ftTransfer : FtTransferErrors;
};

// This type describes the reason why an ftTransfer failed.
//
// The possible text strings for InvalidArguments are:
// "MismatchInAsset" : asset ids of transfer and account did not match
// "MismatchInRemotePrincipal" : principal has no access to virtual account
// "NotAController" : minting or burning attemped by the wrong principal
// "UnknownFtAsset" : an asset id in the transaction does not exist
// "UnknownPrincipal" : an account owner in the transaction does not exist
// "UnknownSubaccount" : an account in the transaction does not exist
// "UnknownVirtualAccount" : a virtual account in the transaction does not exist
//
// Backwards compatibility: see [1].
type FtTransferErrors = variant {
  DeletedVirtualAccount;
  InsufficientFunds;
  InvalidArguments : text;
};

// In the query functions below, we sometimes allow to select ranges of ids. An
// IdRange is a pair of ids (from, to) which means the inclusive interval
// [from,to]. The first id must be smaller than or equal to the second id. If
// the second id is `null` then the range goes all the way to the last possible
// value.
type IdRange = record { nat; opt nat };

// An id range specific for remote account ids.
type RemoteIdRange = record { principal; nat; opt nat };

// In the query functions below, we sometimes allow to select a single id or a
// range or the concatenation of single ids and ranges. Note that `cat` is
// indeed a "concatenation" as opposed to a "union" which means that repetitions
// are not removed. For example a selector such as
//   `cat = vec { id = 1; idRange = record { 0; 1 } }`
// will lead to a repetition of id 1 in the output.
type IdSelector = variant {
  id : nat;
  idRange : IdRange;
  cat : vec variant { id : nat; idRange : IdRange };
};

// An selector as above, but for RemoteIds.
type RemoteSelector = variant {
  id : RemoteId;
  idRange : RemoteIdRange;
  cat : vec variant { id : RemoteId; idRange : RemoteIdRange };
};

// The ledger's ingress interface has the following sections:
//
// * account management queries:
//     accountInfo, virtualAccountInfo, remoteAccountInfo,
//     nAccounts, nVirtualAccounts,
//     state
// * account management updates:
//     openAccounts,
//     openVirtualAccount, deleteVirtualAccount, updateVirtualAccount
// * token management queries:
//     ftInfo, nFtAssets
// * token management updates:
//     createFungibleToken
// * transaction processing queries:
//     aggregators,
//     nStreams, streamInfo, streamStatus,
//     txStatus
//
// Note: Account management queries are "non-public", i.e. only the owner
// (resp. access principal) of an account has access to those queries.
// Token management and transaction processing queries are "public".
//
// Generally, the following holds for this canister interface:
//
// A trap (CANISTER_ERROR) means that there is an error on the receiver side of
// the call. For example, the receiver can be stopping, stopped, running but
// uninitialized, or there could be a bug in the receiver. Traps are considered
// temporary errors and the caller can retry the call later. For example,
// stopping/stopped are assumed to be transitional states of an upgrade cycle
// and are therefore temporary. Bugs in the receiver code are assumed to get
// fixed eventually through an upgrade and are therefore temporary as well.
//
// A throw (CANISTER_REJECT) means that there is an error on the sender side of
// the call. For example, the sender has passed invalid arguments or was not
// authorized to make the call. This is a bug on the sender side because the
// sender should have never made the call with the given arguments. Therefore
// the sender is not expected to handle the response programmatically.
//
// In particular, if the ledger is uninitialized then all calls will trap.
type LedgerIngressAPI = service {
  // === Section: Account management queries

  // Return the immutable data associated with the selected accounts. The
  // immutable data of an account consists of:
  // - the type (the ft asset id).
  //
  // Note: This function is called by the owner of the account.
  //
  // Return value is:
  // - throw (CANISTER_REJECT) if caller is unknown or any of the selected
  // subIds is unknown
  // - a vector of pairs (account id, account type)
  accountInfo : (IdSelector) -> (
    vec record {
      SubId;
      AccountType;
    }
  ) query;

  // Return the immutable data of virtual accounts, which is:
  // - the type (the ft asset id),
  // - the access principal.
  //
  // Note: This function is called by the owner of the virtual account.
  //
  // Return value is:
  // - throw (CANISTER_REJECT) if caller is unknown or any of the selected
  // VirIds is unknown
  // - a vector of pairs (virtual account id, virtual account info)
  //
  // Deleted virtual accounts are skipped in the returned vector.
  virtualAccountInfo : (IdSelector) -> (
    vec record {
      VirId;
      record { AccountType; principal };
    }
  ) query;

  // Return the immutable data of remote accounts, which is:
  // - the type (the ft asset id).
  //
  // Note: This function is called by the access principal of the virtual account.
  //
  // Return value is:
  // - a vector of pairs (remote account id, opt remote account info)
  //
  // Remote accounts that are deleted, unknown or not accessible by the caller
  // are skipped in the returned vector.
  remoteAccountInfo : (RemoteSelector) -> (
    vec record {
      RemoteId;
      AccountType;
    }
  ) query;

  // Return the number of accounts of the caller.
  //
  // Return value is:
  // - throw (CANISTER_REJECT) if caller is unknown
  nAccounts : () -> (nat) query;

  // Return the number of virtual accounts of the caller.
  //
  // Return value is:
  // - throw (CANISTER_REJECT) if caller is unknown
  nVirtualAccounts : () -> (nat) query;

  // Atomic query for various mutable states. The functions can be used to query
  // any combination of account states, virtual account states, remote account
  // states and token supplies. The accounts and virtual accounts must be ownwed
  // by the caller. For the remote accounts the caller must be the access
  // principal.
  //
  // The arguments are selectors. A null value for a record field means the
  // empty selector.
  //
  // The return value for a non-null accounts selector is:
  // - throw (CANISTER_REJECT) if the caller is unknown or any of the selected
  // SubIds is unknown
  //
  // The return value for a non-null virtual accounts selector is:
  // - throw (CANISTER_REJECT) if the caller is unknown or any of the selected
  // VirIds is unknown
  // - deleted virtual accounts are skipped in the returned vector
  //
  // The return value for a non-null ftSupplies selector is:
  // - throw (CANISTER_REJECT) if any of the selected AssetIds is unknown
  //
  // The return value for a non-null remote accounts selector is:
  // - remote accounts that are unknown, deleted, or not accessible by the caller are
  //   skipped in the return list
  //
  // Note that a caller cannot learn information about virtual accounts of other
  // principals by querying them as remote accounts, not even if they exist, because
  // they are skipped regardless of  whether the virtual account is inaccessible,
  // does not exist or has been deleted.
  state : (
    record {
      accounts : opt IdSelector;
      ftSupplies : opt IdSelector;
      remoteAccounts : opt RemoteSelector;
      virtualAccounts : opt IdSelector;
    }
  ) -> (
    record {
      accounts : vec record {
        SubId;
        AccountState;
      };
      ftSupplies : vec record {
        AssetId;
        FtSupply;
      };
      remoteAccounts : vec record {
        RemoteId;
        record { AccountState; Time };
      };
      virtualAccounts : vec record {
        VirId;
        record { AccountState; SubId; Time };
      };
    }
  ) query;

  // === Section: Account management updates

  // Open n new accounts for the caller, all of the same type.
  //
  // Arguments are the number of accounts to open and the type.
  //
  // If the caller is unknown then the caller gets registered.
  //
  // Return value is:
  // - ok : index of first newly openend account
  // - err NoSpaceForPrincipal if caller is unknown an cannot be registered
  // - err NoSpaceForSubaccount if caller has too many accounts already
  // - err InvalidArguments with text:
  //   - "UnknownFtAsset" if the variant case in AccountType is unknown
  openAccounts : (nat, AccountType) -> (
    variant {
      ok : record { first : SubId };
      err : variant {
        NoSpaceForPrincipal;
        NoSpaceForSubaccount;
        InvalidArguments : text;
      };
    }
  );

  // Open one new virtual account for the caller.
  //
  // Arguments are:
  // - account type (i.e. ft asset id)
  // - access principal
  // - initial virtual account state (i.e. ft asset balance)
  // - backing account by SubId
  // - initial expiration
  //
  // Note: The first two arguments define the immutable virtual account data.
  // The last three arguments define the initial state of the mutable virtual
  // account data.
  //
  // Return value is:
  // - throw (CANISTER_REJECT) if caller is unknown
  // - ok : index of the new virtual account
  // - err NoSpaceForAccount if caller has too many virtual accounts already
  // - err InvalidArguments with text:
  //   - "UnknownSubaccount" if backing account is unknown
  //   - "MismatchInAsset" if backing account does not match the specified
  //   AccountType
  //   - "InvalidExpirationTime" if expiration time lies in the past
  openVirtualAccount : (AccountType, principal, AccountState, SubId, Time) -> (
    variant {
      ok : record { id : VirId };
      err : variant { NoSpaceForAccount; InvalidArguments : text };
    }
  );

  // Delete a virtual account of the caller.
  //
  // Return value is:
  // - throw (CANISTER_REJECT) if caller is unknown
  // - ok
  // - err DeletedVirtualAccount if virtual account has already been deleted
  // - err InvalidArguments with text:
  //   - "UnknownVirtualAccount" if virtual account id is not known
  deleteVirtualAccount : (VirId) -> (
    variant {
      ok : variant { ft : nat };
      err : variant { DeletedVirtualAccount; InvalidArguments : text };
    }
  );

  // Update the state of a virtual account of the caller.
  //
  // Argument is the virtual account id and the update record.
  //
  // Update record: We can update the virtual account state, backing account and
  // expiration. A null value for any of those fields means that the existing
  // values will remain unchanged. The account state is updated by changing the
  // ft balance. This can be done by setting a new absolute value for the
  // balance or by incrementing or decrementing it by providing the delta.
  //
  // Return value is:
  // - throw (CANISTER_REJECT) if caller is unknown
  // - ok : new balance (nat) and the delta (int) that was the result of the
  // change
  // - err DeletedVirtualAccount if virtual account has already been deleted
  // - err InsufficientFunds if a decrement operation was not possible
  // - err InvalidArguments with text:
  //   - "UnknownVirtualAccount" if virtual account id is unknown
  //   - "UnknownSubaccount" if new backing account is unknown
  //   - "MismatchInAsset" if new backing account does not match the account
  //   type
  //   - "InvalidExpirationTime" if expiration time lies in the past
  updateVirtualAccount : (
    VirId,
    record {
      state : opt variant { ft_set : nat; ft_inc : nat; ft_dec : nat };
      backingAccount : opt SubId;
      expiration : opt Time;
    },
  ) -> (
    variant {
      ok : variant { ft : record { nat; int } };
      err : variant {
        DeletedVirtualAccount;
        InsufficientFunds;
        InvalidArguments : text;
      };
    }
  );

  // === Section: Token management queries

  // Return the immutable information for a fungible token.
  //
  // Return value is:
  // - throw (CANISTER_REJECT) if asset id is unknown
  // - the immutable information record of the token
  //
  // Note: The "description" is a self-description of the token and should
  // never be trusted.
  //
  // Backwards compatibility:
  // New fields can be added to the returned record. A caller who does not know
  // about them will not see them.
  ftInfo : (IdSelector) -> (
    vec record {
      AssetId;
      record { controller : principal; decimals : nat8; description : text };
    }
  ) query;

  // Return the number of asset ids issued for fungible tokens.
  nFtAssets : () -> (nat) query;

  // === Section: Token management updates

  // Register a new fungible token, the caller becomes the controller of it.
  //
  // Arguments are:
  // - the token decimals
  // - the token's self-description
  //
  // Return value is:
  // - throw (CANISTER_REJECT) if the description exceeds the allowed length
  // - ok : the asset id assigned to the new token
  // - err FeeError if the caller did not have enough funds to cover the fee
  //   required to register a new token
  // - err NoSpace if too many tokens are already registered
  // - err TooLongDescription if the description exceeds the allowed length
  createFungibleToken : (nat8, text) -> (
    variant {
      ok : AssetId;
      err : variant { FeeError; NoSpace };
    }
  );

  // === Section: Transaction processing queries

  // Return the list of aggregators (their principals) and priority values
  // (nat). The client is advised to use the priority values when randomly
  // choosing an aggregator. An aggregator's probability to be chosen is
  // proportional to its priority value. The sum of all priority values
  // represent a probability of 1. The ledger can use this mechanism to control
  // load balancing between aggregators.
  aggregators : () -> (vec record { principal; nat }) query;

  // Return the total number of registered streams.
  nStreams : () -> (nat) query;

  // Return the immutable information for a stream given by stream id.
  // The immutable information is:
  // - principal of the aggregator owning the stream.
  //
  // Return value is:
  // - throw (CANISTER_REJECT) if any one of the selected stream ids is unknown
  // - a vector of pairs (stream id, aggregator principal)
  streamInfo : (IdSelector) -> (vec record { nat; principal }) query;

  // Return the status of one or more streams given by their stream ids.
  //
  // Return value is:
  // - throw (CANISTER_REJECT) if any selected stream id has not yet been issued
  streamStatus : (IdSelector) -> (
    vec record {
      nat;
      record {
        source : variant { aggregator : principal; internal };
        closed : bool;
        lastActive : Time;
        length : nat;
      };
    }
  ) query;

  // Return the status of a transactions given by their global id (gid).
  //
  // Return value is:
  // - throw (CANISTER_REJECT) if the stream id inside the gid has not yet been
  // issued
  txStatus : (vec GlobalId) -> (vec GidStatus) query;

};

service : () -> LedgerIngressAPI;

// Footnotes
//
// [1]
// * Expect new variant cases to be added in the future.
// * Clients are advised to wrap the variant inside an opt. That way, if a new
// case is introduced that the client does not yet know about then the client
// code will see `null` as the value.
