import "../agg-types.did";

// The aggregator's ingress interface consists of two functions:
// * submitAndExecute
// * txStatus (query)
//
// Generally, the following holds for this canister interface:
//
// A trap (CANISTER_ERROR) means that there is an error on the receiver side of
// the call. For example, the receiver can be stopping, stopped, running but
// uninitialized, or there could be a bug in the receiver. Traps are considered
// temporary errors and the caller can retry the call later. For example,
// stopping/stopped are assumed to be transitional states of an upgrade cycle
// and are therefore temporary. Bugs in the receiver code are assumed to get
// fixed eventually through an upgrade and are therefore temporary as well.
//
// A throw (CANISTER_REJECT) means that there is an error on the sender side of
// the call. For example, the sender has passed invalid arguments or was not
// authorized to make the call. This is a bug on the sender side because the
// sender should have never made the call with the given arguments. Therefore
// the sender is not expected to handle the response programmatically.
//
// In particular, if the aggregator is uninitialized or is shut down then all
// calls will trap.
type AggregatorIngressAPI = service {

  // `submitAndExecute` submits transactions to the aggregator. The aggregator
  // enqueues transactions and issues a global id for each of them.
  //
  // `submitAndExecute` and `txStatus` are frequently called together.
  //
  // The function throws (CANISTER_REJECT) if:
  //   * A (virtual) account id or asset id is larger than 64 bits
  //   * `amount` is larger than 128 bits
  //   * The principal in `vir` is longer than 29 bytes or otherwise invalid
  //   * The  memo vector is too long (too many entries)
  //   * An individual memo entry is too long (too many bytes)
  //   * The combined length of all memos is too large (too many bytes)
  // The reject message will contain the reason in descriptive text format.
  //
  // The function traps (CANISTER_ERROR) if:
  //   * The internal queue is full (back pressure)
  // The reject message will contain the reason in descriptive text format.
  //
  // The function is subject to ingress message inspection. Any call that would
  // throw for any of the above reasons will be rejected during inspection.
  // This will lead to an http 500 error. The caller will, unfortunately, not be
  // able to learn the specific reason why the call failed.
  //
  // The aggregator does not know if the accounts in the argument exist, if the
  // caller has access to the accounts or if there are sufficient funds. These
  // kind of errors will only be caught later during processing in the ledger.
  //
  // Backwards compatibility: In the future, new return values may be added as
  // positional values after the last one.
  submitAndExecute : (vec TxInput) -> (vec GlobalId);

  // `txStatus` returns the current status of a gid.
  //
  // See README.md for the typical process to track a transaction after
  // submission to the aggregator.
  //
  // The return value is:
  // - throw (CANISTER_REJECT) if any `nat` inside the gid argument exceeds
  // 64 bits,
  // - throw (CANISTER_REJECT) if the aggregator knows that the gid has not yet
  // been issued,
  // - trap (CANISTER_ERROR) if the aggregator does not have a current stream id
  txStatus : (vec GlobalId) -> (vec GidStatus) query;

  // Return the status of the current stream(s).
  //
  // In the current implementation the aggregator has at most one stream open at
  // any point in time. However, the interface is designed to support multiple
  // streams in case they are needed in the future.
  //
  // The aggregator keeps a list of all streams that it has used in the past.
  // If the aggregator knows that a certain stream has been closed by the ledger
  // then, but only then, can it prune the stream from the list. This list is
  // returned by this function.
  //
  // In the current implementation the aggregator only receives a new stream id
  // when the previous one (in fact all previous ones) have been closed by the
  // ledger. Hence, the returned list has at most one element.
  //
  // After first install or re-install the aggregator traps on this function
  // (returns CANISTER_ERROR). The aggregator needs to communciate with the
  // ledger at least once before it can guarantee correctness of the returned
  // list.
  streamStatus : () -> (vec StreamStatus) query;

};

service : () -> AggregatorIngressAPI;
