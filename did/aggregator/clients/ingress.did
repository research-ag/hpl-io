import "../agg-types.did";

// API

service : () -> {
  // UPDATES

  // `submitAndExecute` submits transactions to the aggregator. The aggregator
  // enqueues transactions and issues a global id for each of them.
  //
  // `submitAndExecute` will trap in the following cases:
  // * A `SubId`, `VirId` or `assetId` is larger than 64 bits
  // * `amount` is larger than 128 bits
  // * The principal in `vir` is longer than 29 bytes or otherwise invalid
  // * The memo vector is too long (too many entries)
  // * An individual memo entry is too long (too many bytes)
  // * The combined length of all memos is too large (too many bytes)
  // * The internal queue is full (back pressure)
  // The trap message will contain the reason in descriptive text format.
  //
  // `submitAndExecute` is subject to ingress message inspection.  Any call that
  // would trap for any of the above reasons will be rejected during inspection.
  // This will lead to an http 500 error. The caller will not be able to learn
  // the specific reason why the call failed.
  //
  // The aggregator does not check if the accounts exist, if the caller has
  // access to the accounts or if there are sufficient funds. Those kind of
  // errors will only be caught later during processing in the ledger.
  //
  // Backwards compatibility: In the future, new transaction types can be
  // introduced as new variant cases in the `TxInput` argument. New return
  // values can be added as positional values after the last one.
  //
  // If the structure of GlobalId changes then it is advisable to introduce a
  // new function replacing this `submitAndExecute`.
  submitAndExecute : (vec TxInput) -> (vec GlobalId);

  // QUERIES

  // `txStatus` returns the current status of a gid.
  //
  // See README.md for the typical process to track a transaction after
  // submission to the aggregator.
  //
  // The function traps if the nats in global id are larger than 64 bits.
  //
  // The function traps if the stream id inside the gid is the current one but
  // the stream position lies in the future. Because then the aggregator knows
  // for sure that the gid was not yet issued.
  //
  // The function throws if the aggregator has no current stream id, i.e. if
  // it is in the process of obtaining one.
  // This can happen after a reinstall, an update the did not preserve state,
  // or after the ledger reset stops the current stream due to a timeout.
  //
  // Backwards compatibility:
  //
  // New fields can be added to the returned record.  Old code will not see
  // those fields.
  //
  // If the internal structure of GlobalId changes then it is advisable to
  // introduce a new function replacing this `txStatus`.
  //
  // New cases can be added to the GidStatus variant because it is
  // wrapped in an `opt`. Old code that does not know the new case will see the
  // whole status as `null`.
  //
  // For example, if we want to add the ability to cancel transactions that are
  // already in the queue then we can add a case `canceled` to the
  // GidStatus variant. An old frontend that is not aware of the
  // case `canceled` would see `null` as the status if it queries a transaction
  // that is in that state.  However, this is not a problem because a frontend
  // queries only its own transactions. And if the frontend does not know about
  // the cancelation feature then none of its transactions will be in that
  // state.
  txStatus : (vec GlobalId) -> (vec GidStatus) query;

  streamStatus : () -> (vec StreamStatus) query;
};
